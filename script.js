// =====================================================
// Logic Calculator - Full script.js (TH)
// - ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
// - ‡πÅ‡∏Å‡πâ generateTruthTable() + createSingleTable()
//   ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏£‡∏Å <table> ‡∏•‡∏á‡πÉ‡∏ô .table-container ‡πÄ‡∏™‡∏°‡∏≠
// =====================================================

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å
let currentExpression = '';
let cursorPosition = 0;
let truthTableVisible = false;

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', function () {
  const display = document.getElementById('display');

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
  display.addEventListener('input', function () {
    currentExpression = this.value;
    cursorPosition = this.selectionStart;
    if (truthTableVisible) {
      generateTruthTable();
    }
  });

  display.addEventListener('click', function () {
    cursorPosition = this.selectionStart;
  });

  display.addEventListener('keyup', function () {
    cursorPosition = this.selectionStart;
  });

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ)
  display.addEventListener('keydown', function (event) {
    if (
      event.key === 'ArrowLeft' ||
      event.key === 'ArrowRight' ||
      event.key === 'Backspace'
    ) {
      // ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    }
  });
});

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• =====
function addToDisplay(value) {
  currentExpression =
    currentExpression.slice(0, cursorPosition) +
    value +
    currentExpression.slice(cursorPosition);
  cursorPosition += value.length;
  updateDisplay();
  if (truthTableVisible) {
    generateTruthTable();
  }
}

function updateDisplay() {
  const display = document.getElementById('display');
  display.value = currentExpression;
  display.setSelectionRange(cursorPosition, cursorPosition);
  display.focus();
}

function moveCursorLeft() {
  const display = document.getElementById('display');
  if (cursorPosition > 0) {
    cursorPosition--;
    display.setSelectionRange(cursorPosition, cursorPosition);
    display.focus();
  }
}

function moveCursorRight() {
  const display = document.getElementById('display');
  if (cursorPosition < currentExpression.length) {
    cursorPosition++;
    display.setSelectionRange(cursorPosition, cursorPosition);
    display.focus();
  }
}

function clearDisplay() {
  currentExpression = '';
  cursorPosition = 0;
  updateDisplay();
  const rd = document.getElementById('resultDisplay');
  rd.classList.remove('show');
  if (truthTableVisible) {
    generateTruthTable();
  }
}

function backspace() {
  if (cursorPosition > 0) {
    currentExpression =
      currentExpression.slice(0, cursorPosition - 1) +
      currentExpression.slice(cursorPosition);
    cursorPosition--;
    updateDisplay();
    if (truthTableVisible) {
      generateTruthTable();
    }
  }
}

// ===== ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á =====
function toggleTruthTable() {
  truthTableVisible = !truthTableVisible;
  const truthTable = document.getElementById('truthTable');
  const toggleText = document.getElementById('toggleText');

  if (truthTableVisible) {
    truthTable.classList.add('show');
    toggleText.textContent = '‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á';
    generateTruthTable(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î
  } else {
    truthTable.classList.remove('show');
    toggleText.textContent = '‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á';
  }
}

// ===== ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå / ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏±‡∏à‡∏ô‡∏¥‡∏£‡∏±‡∏ô‡∏î‡∏£‡πå =====
function evaluateExpression() {
  if (!currentExpression) return;

  const resultDisplay = document.getElementById('resultDisplay');
  const variables = extractVariables(currentExpression);

  if (variables.length === 0) {
    resultDisplay.innerHTML = '<span class="error">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡∏™‡∏π‡∏ï‡∏£</span>';
    resultDisplay.classList.add('show');
    return;
  }

  try {
    let isTautology = true;
    const numRows = Math.pow(2, variables.length);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
    for (let i = 0; i < numRows; i++) {
      const values = {};
      for (let j = 0; j < variables.length; j++) {
        values[variables[j]] = Boolean(
          i & (1 << (variables.length - 1 - j))
        );
      }
      const result = evaluateStepByStep(currentExpression, values);
      if (!result.result) {
        isTautology = false;
        break;
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    resultDisplay.innerHTML = `
      <div><strong>‡∏™‡∏π‡∏ï‡∏£:</strong> ${currentExpression}</div>
      <div><strong>‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£:</strong> ${variables.join(', ')}</div>
      <div><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> <span style="color: ${
        isTautology ? '#27ae60' : '#e74c3c'
      }">${isTautology ? '‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏à‡∏ô‡∏¥‡∏£‡∏±‡∏ô‡∏î‡∏£‡πå' : '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏à‡∏ô‡∏¥‡∏£‡∏±‡∏ô‡∏î‡∏£‡πå'}</span></div>
    `;
    resultDisplay.classList.add('show');

    if (truthTableVisible) {
      generateTruthTable();
    }
  } catch (error) {
    resultDisplay.innerHTML = '<span class="error">‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</span>';
    resultDisplay.classList.add('show');
  }
}

// =====================================================
//      ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á (2 ‡∏ï‡∏±‡∏ß)
// =====================================================

// 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÇ‡∏î‡∏¢‡∏´‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ .table-container ‡πÄ‡∏™‡∏°‡∏≠
function generateTruthTable() {
  if (!currentExpression) return;

  const truthTableDiv = document.getElementById('truthTable');

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö CSS ‡πÉ‡∏´‡∏°‡πà
  truthTableDiv.innerHTML = `
    <h3>‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á</h3>
    <div class="table-container" id="ttContainer"></div>
  `;

  const container = document.getElementById('ttContainer');

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏¢‡πà‡∏≠‡∏¢ + ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å)
  const subExpressions = getSubExpressions(currentExpression);
  if (subExpressions.length > 0) {
    createSingleTable(subExpressions, container); // ‡∏™‡πà‡∏á container ‡∏Ç‡∏≠‡∏á .table-container
  }
}

// 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á <table> ‡∏•‡∏á‡πÉ‡∏ô container (.table-container) ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
function createSingleTable(expressions, container) {
  const variables = extractVariables(expressions[expressions.length - 1]);
  const numRows = Math.pow(2, variables.length);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‚Üí ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏¢‡πà‡∏≠‡∏¢ ‚Üí ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å
  const mainExpr = expressions[expressions.length - 1];
  const subExprs = expressions.slice(0, -1).filter((e) => !variables.includes(e));
  const orderedExprs = [...subExprs, mainExpr];

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const table = document.createElement('table');
  const thead = document.createElement('thead');
  const tbody = document.createElement('tbody');

  // ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß
  const headerRow = document.createElement('tr');

  // ‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
  variables.forEach((variable) => {
    const th = document.createElement('th');
    th.textContent = variable;
    headerRow.appendChild(th);
  });

  // ‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏¢‡πà‡∏≠‡∏¢ + ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å
  orderedExprs.forEach((expr) => {
    const th = document.createElement('th');
    th.textContent = expr;
    headerRow.appendChild(th);
  });

  thead.appendChild(headerRow);

  // ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  for (let i = numRows - 1; i >= 0; i--) {
    const row = document.createElement('tr');

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    const values = {};
    variables.forEach((variable, j) => {
      values[variable] = Boolean(i & (1 << (variables.length - 1 - j)));
      const td = document.createElement('td');
      td.textContent = values[variable] ? 'T' : 'F';
      td.className = values[variable] ? 'true' : 'false';
      row.appendChild(td);
    });

    // ‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏¢‡πà‡∏≠‡∏¢/‡∏´‡∏•‡∏±‡∏Å
    orderedExprs.forEach((expr) => {
      const result = evaluateStepByStep(expr, values);
      const td = document.createElement('td');
      td.textContent = result.result ? 'T' : 'F';
      td.className = result.result ? 'true' : 'false';
      row.appendChild(td);
    });

    tbody.appendChild(row);
  }

  table.appendChild(thead);
  table.appendChild(tbody);

  // üëá ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÅ‡∏ó‡∏£‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏á‡πÉ‡∏ô .table-container ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ CSS ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  container.appendChild(table);

  return table;
}

// =====================================================
//              ‡∏™‡πà‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå
// =====================================================

// ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏¢‡πà‡∏≠‡∏¢
function getSubExpressions(expression) {
  const result = [];

  // 1) ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (p,q,r,s) ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  const variables = expression.match(/[pqrs]/g) || [];
  [...new Set(variables)].sort().forEach((v) => result.push(v));

  // 2) ‡∏ô‡∏¥‡πÄ‡∏™‡∏ò‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (~p, ~q, ...)
  const negations = expression.match(/~[pqrs]/g) || [];
  negations.forEach((neg) => {
    if (!result.includes(neg)) result.push(neg);
  });

  // 3) ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô)
  const bracketRegex = /\(([^\(\)]+)\)/g;
  let bracketMatch;
  while ((bracketMatch = bracketRegex.exec(expression)) !== null) {
    const innerContent = bracketMatch[1];
    if (!result.includes(innerContent)) result.push(innerContent);
  }

  // 4) ‡∏ô‡∏¥‡πÄ‡∏™‡∏ò‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö (~(q‚à®s))
  const negatedBrackets = expression.match(/~\([^\(\)]+\)/g) || [];
  negatedBrackets.forEach((negBracket) => {
    if (!result.includes(negBracket)) result.push(negBracket);
  });

  // 5) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö: ‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
  if (!expression.includes('(')) {
    // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ~ ‚Üí ‚àß ‚Üí ‚à® ‚Üí ‚Üí ‚Üí ‚Üî ‚Üí ‚äï
    const operators = ['‚àß', '‚à®', '‚Üí', '‚Üî', '‚äï'];

    for (let op of operators) {
      const opRegex = new RegExp(`([^${operators.join('')}~()]+)\\${op}`, 'g');
      let match;
      while ((match = opRegex.exec(expression)) !== null) {
        const leftPart = match[1].trim();
        if (
          leftPart &&
          !result.includes(leftPart) &&
          leftPart !== expression
        ) {
          result.push(leftPart);
        }
      }
    }

    // ‡∏´‡∏≤‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏´‡∏¢‡∏≤‡∏ö ‡πÜ
    for (let op of operators) {
      if (expression.includes(op)) {
        const parts = expression.split(op);
        for (let i = 0; i < parts.length - 1; i++) {
          let subExpr =
            parts.slice(0, i + 1).join(op) +
            op +
            parts[i + 1].split(
              operators.find((o) => o !== op && parts[i + 1].includes(o)) || ''
            )[0];
          subExpr = subExpr.replace(/[‚àß‚à®‚Üí‚Üî‚äï]$/, '').trim();
          if (
            subExpr &&
            !result.includes(subExpr) &&
            subExpr !== expression &&
            subExpr.match(/[pqrs~]+[‚àß‚à®‚Üí‚Üî‚äï][pqrs~]+/)
          ) {
            result.push(subExpr);
          }
        }
        break; // ‡πÄ‡∏à‡∏≠ op ‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏≠
      }
    }
  }

  // 6) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  if (!result.includes(expression)) result.push(expression);

  return result;
}

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)
function evaluateStepByStep(expression, values) {
  let steps = [];
  let current = expression;

  // ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏î‡πâ‡∏ß‡∏¢ T/F
  for (const [variable, value] of Object.entries(values)) {
    const regex = new RegExp(variable, 'g');
    current = current.replace(regex, value ? 'T' : 'F');
  }
  steps.push(`‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£: ${current}`);

  // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏Å‡πà‡∏≠‡∏ô (‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤)
  let iteration = 0;
  while (current.includes('(') && iteration < 50) {
    iteration++;
    const innerMatch = current.match(/\([^()]*\)/);
    if (innerMatch) {
      const innerExpr = innerMatch[0];
      const innerContent = innerExpr.slice(1, -1);
      const innerResult = evaluateSimpleExpression(innerContent);
      current = current.replace(innerExpr, innerResult ? 'T' : 'F');
      steps.push(`${innerExpr} = ${innerResult ? 'T' : 'F'} ‚â° ${current}`);
    } else {
      break;
    }
  }

  // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  while (containsOperator(current) && iteration < 200) {
    iteration++;
    const oldCurrent = current;
    current = evaluateNextOperation(current);
    if (current !== oldCurrent) {
      steps.push(`${oldCurrent} ‚â° ${current}`);
    } else {
      break;
    }
  }

  return { result: current === 'T', steps };
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏°
function containsOperator(expr) {
  return /[~‚àß‚à®‚Üí‚Üî‚äï]/.test(expr);
}

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
function evaluateNextOperation(expr) {
  // ‡∏•‡∏≥‡∏î‡∏±‡∏ö: ~ > ‚àß > ‚à® > ‚Üí > ‚Üî > ‚äï

  // NOT (~)
  if (expr.includes('~')) {
    return expr.replace(/~([TF])/g, (m, p1) => (p1 === 'T' ? 'F' : 'T'));
  }

  // AND (‚àß)
  if (expr.includes('‚àß')) {
    return expr.replace(/([TF])\s*‚àß\s*([TF])/g, (m, a, b) =>
      a === 'T' && b === 'T' ? 'T' : 'F'
    );
  }

  // OR (‚à®)
  if (expr.includes('‚à®')) {
    return expr.replace(/([TF])\s*‚à®\s*([TF])/g, (m, a, b) =>
      a === 'T' || b === 'T' ? 'T' : 'F'
    );
  }

  // IMPLIES (‚Üí)
  if (expr.includes('‚Üí')) {
    return expr.replace(/([TF])\s*‚Üí\s*([TF])/g, (m, a, b) =>
      a === 'F' || b === 'T' ? 'T' : 'F'
    );
  }

  // IFF (‚Üî)
  if (expr.includes('‚Üî')) {
    return expr.replace(/([TF])\s*‚Üî\s*([TF])/g, (m, a, b) =>
      a === b ? 'T' : 'F'
    );
  }

  // XOR (‚äï)
  if (expr.includes('‚äï')) {
    return expr.replace(/([TF])\s*‚äï\s*([TF])/g, (m, a, b) =>
      a !== b ? 'T' : 'F'
    );
  }

  return expr;
}

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏á‡πà‡∏≤‡∏¢ ‡πÜ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
function evaluateSimpleExpression(expr) {
  let current = expr;
  let iteration = 0;

  while (containsOperator(current) && iteration < 200) {
    iteration++;
    const oldCurrent = current;
    current = evaluateNextOperation(current);
    if (current === oldCurrent) break;
  }

  return current === 'T';
}

// ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå
function extractVariables(expression) {
  const matches = expression.match(/[pqrs]/g);
  if (matches) return [...new Set(matches)].sort();
  return [];
}
